// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id          String   @id @default(cuid())
  email       String?  @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  address     String?
  region      String?
  role        UserRole @default(CLIENT)
  isVerified  Boolean  @default(false)
  isActive    Boolean  @default(true)
  
  // Student verification
  isStudent           Boolean @default(false)
  faculty            String?
  studentIdFront     String? // URL to uploaded image
  studentIdBack      String? // URL to uploaded image
  studentVerified    Boolean @default(false)
  studentVerifiedAt  DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  orders      Order[]
  cart        CartItem[]
  reviews     Review[]
  addresses   Address[]
  
  @@map("users")
}

model Address {
  id          String  @id @default(cuid())
  userId      String
  firstName   String
  lastName    String
  phone       String
  address     String
  region      String
  isDefault   Boolean @default(false)
  
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
  
  @@map("addresses")
}

// Category Management
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  featuredCategories FeaturedCategory[]
  
  @@map("categories")
}

// Global Color and Size Management
model Color {
  id          String   @id @default(cuid())
  name        String   @unique
  hexCode     String   @unique
  pantoneCode String?
  isActive    Boolean  @default(true)
  isSystem    Boolean  @default(false) // True for medical constants, false for custom
  sortOrder   Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations  
  productColors ProductColor[] @relation("ColorReference")
  
  @@map("colors")
}

model Size {
  id          String   @id @default(cuid())
  name        String   // "XS", "S", "M", etc.
  label       String   // "Extra Small", "Small", etc.
  category    String   @default("UNISEX") // "UNISEX", "WOMEN", "MEN", "PETITE", "TALL"
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  productVariants ProductVariant[]
  
  @@unique([name, category])
  @@map("sizes")
}

// Product Management
model Product {
  id            String        @id @default(cuid())
  name          String
  slug          String        @unique
  description   String?
  shortDescription String?
  sku           String        @unique
  price         Decimal       @db.Decimal(10, 2)
  comparePrice  Decimal?      @db.Decimal(10, 2)
  costPrice     Decimal?      @db.Decimal(10, 2)
  trackQuantity Boolean       @default(true)
  isActive      Boolean       @default(true)
  isFeatured    Boolean       @default(false)
  
  // Product-specific attributes
  fabricType    String?       // "100% Cotton", "65/35 Poly-Cotton", "Performance Stretch"
  pocketCount   Int?
  gender        String?       // "Unisex", "Women", "Men"
  
  // SEO and Meta
  metaTitle     String?
  metaDescription String?
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  categoryId    String
  category      Category      @relation(fields: [categoryId], references: [id])
  colors        ProductColor[]
  variants      ProductVariant[]
  reviews       Review[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  featuredProducts FeaturedProduct[]
  
  @@map("products")
}

model ProductColor {
  id          String   @id @default(cuid())
  productId   String
  colorId     String?  // Reference to global Color
  colorName   String   // "Navy Blue", "Ceil Blue", etc.
  colorCode   String   // Hex code like "#003366"
  pantoneCode String?  // Optional Pantone reference
  sortOrder   Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  color       Color?   @relation("ColorReference", fields: [colorId], references: [id])
  images      ProductImage[]
  variants    ProductVariant[]
  
  @@unique([productId, colorCode])
  @@map("product_colors")
}

model ProductVariant {
  id          String   @id @default(cuid())
  productId   String
  colorId     String
  sizeId      String
  sku         String   @unique
  barcode     String?
  price       Decimal? @db.Decimal(10, 2) // If different from base product
  
  // Inventory
  quantity    Int      @default(0)
  reservedQty Int      @default(0) // For cart reservations
  lowStockThreshold Int @default(5)
  
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  color       ProductColor @relation(fields: [colorId], references: [id], onDelete: Cascade)
  size        Size     @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  cartItems   CartItem[]
  orderItems  OrderItem[]
  stockMovements StockMovement[]
  
  @@unique([productId, colorId, sizeId])
  @@map("product_variants")
}

model ProductImage {
  id          String  @id @default(cuid())
  productId   String
  colorId     String? // Now images are associated with specific colors
  url         String
  altText     String?
  sortOrder   Int     @default(0)
  isMain      Boolean @default(false)
  
  color       ProductColor? @relation(fields: [colorId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}

// Review System
model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  isVerified Boolean @default(false) // Verified purchase
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([productId, userId]) // One review per user per product
  @@map("reviews")
}

// Cart Management
model CartItem {
  id        String          @id @default(cuid())
  userId    String
  productId String
  variantId String?
  quantity  Int
  
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  
  // Relations
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId, variantId]) // Prevent duplicate cart items
  @@map("cart_items")
}

// Order Management
model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  userId        String
  addressId     String
  
  // Order totals
  subtotal      Decimal     @db.Decimal(10, 2)
  shippingCost  Decimal     @db.Decimal(10, 2) @default(0)
  taxAmount     Decimal     @db.Decimal(10, 2) @default(0)
  discountAmount Decimal    @db.Decimal(10, 2) @default(0)
  total         Decimal     @db.Decimal(10, 2)
  
  // Order status
  status        OrderStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  
  // Tracking
  trackingNumber String?
  
  // Student discount
  studentDiscount Boolean   @default(false)
  
  // Notes
  notes         String?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  user          User        @relation(fields: [userId], references: [id])
  address       Address     @relation(fields: [addressId], references: [id])
  items         OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id        String          @id @default(cuid())
  orderId   String
  productId String
  variantId String?
  quantity  Int
  price     Decimal         @db.Decimal(10, 2) // Price at time of order
  
  // Store ordered color/size for reference (in case variants change later)
  colorName String?
  sizeName  String?
  
  // Relations
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  
  @@map("order_items")
}

// Inventory Management
model StockMovement {
  id          String          @id @default(cuid())
  variantId   String
  type        StockMovementType
  quantity    Int
  reason      String?
  reference   String?         // Order ID, adjustment reference, etc.
  
  createdAt   DateTime        @default(now())
  
  // Relations
  variant     ProductVariant  @relation(fields: [variantId], references: [id])
  
  @@map("stock_movements")
}

// Enums
enum UserRole {
  CLIENT
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum StockMovementType {
  IN           // Stock increase
  OUT          // Stock decrease  
  ADJUSTMENT   // Manual adjustment
  RETURN       // Customer return
}

// Homepage Management Models
model HeroSection {
  id          String    @id @default(cuid())
  title       String
  subtitle    String?
  buttonText  String
  buttonLink  String
  mediaType   String    @default("image") // "image" or "video"
  mediaUrl    String?   // For video or single image
  mediaUrls   Json?     // For multiple images (array of URLs)
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("hero_sections")
}

model FeaturedCategory {
  id          String    @id @default(cuid())
  categoryId  String
  title       String?   // Custom title override
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  category    Category  @relation(fields: [categoryId], references: [id])
  
  @@map("featured_categories")
}

model FeaturedProduct {
  id          String    @id @default(cuid())
  productId   String
  title       String?   // Custom title override
  description String?
  badge       String?   // "New", "Sale", "Limited Edition"
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  product     Product   @relation(fields: [productId], references: [id])
  
  @@map("featured_products")
}

model Testimonial {
  id          String    @id @default(cuid())
  name        String
  role        String    // "Medical Student", "Nurse", etc.
  content     String
  rating      Int       @default(5) // 1-5 stars
  imageUrl    String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("testimonials")
}

model NewsletterSection {
  id          String    @id @default(cuid())
  title       String
  description String?
  placeholder String    @default("Enter your email")
  buttonText  String    @default("Subscribe")
  isActive    Boolean   @default(true)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("newsletter_sections")
}

model AboutSection {
  id          String    @id @default(cuid())
  title       String
  description String?
  isActive    Boolean   @default(true)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  features    AboutFeature[]
  
  @@map("about_sections")
}

model AboutFeature {
  id          String    @id @default(cuid())
  sectionId   String
  icon        String    // Icon name or class
  title       String
  description String
  sortOrder   Int       @default(0)
  
  section     AboutSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  
  @@map("about_features")
}